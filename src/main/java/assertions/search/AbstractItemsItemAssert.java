package assertions.search;

import models.ItemsItem;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ItemsItem} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractItemsItemAssert<S extends AbstractItemsItemAssert<S, A>, A extends ItemsItem> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractItemsItemAssert}</code> to make assertions on actual ItemsItem.
   * @param actual the ItemsItem we want to make assertions on.
   */
  protected AbstractItemsItemAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ItemsItem's collectionId is equal to the given one.
   * @param collectionId the given collectionId to compare the actual ItemsItem's collectionId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemsItem's collectionId is not equal to the given one.
   */
  public S hasCollectionId(String collectionId) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting collectionId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCollectionId = actual.getCollectionId();
    if (!Objects.areEqual(actualCollectionId, collectionId)) {
      failWithMessage(assertjErrorMessage, actual, collectionId, actualCollectionId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem's fields contains the given FieldsItem elements.
   * @param fields the given elements that should be contained in actual ItemsItem's fields.
   * @return this assertion object.
   * @throws AssertionError if the actual ItemsItem's fields does not contain all given FieldsItem elements.
   */
  public S hasFields(FieldsItem... fields) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // check that given FieldsItem varargs is not null.
    if (fields == null) failWithMessage("Expecting fields parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFields(), fields);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem's fields contains the given FieldsItem elements in Collection.
   * @param fields the given elements that should be contained in actual ItemsItem's fields.
   * @return this assertion object.
   * @throws AssertionError if the actual ItemsItem's fields does not contain all given FieldsItem elements.
   */
  public S hasFields(java.util.Collection<? extends FieldsItem> fields) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // check that given FieldsItem collection is not null.
    if (fields == null) {
      failWithMessage("Expecting fields parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFields(), fields.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem's fields contains <b>only</b> the given FieldsItem elements and nothing else in whatever order.
   * @param fields the given elements that should be contained in actual ItemsItem's fields.
   * @return this assertion object.
   * @throws AssertionError if the actual ItemsItem's fields does not contain all given FieldsItem elements.
   */
  public S hasOnlyFields(FieldsItem... fields) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // check that given FieldsItem varargs is not null.
    if (fields == null) failWithMessage("Expecting fields parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFields(), fields);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem's fields contains <b>only</b> the given FieldsItem elements in Collection and nothing else in whatever order.
   * @param fields the given elements that should be contained in actual ItemsItem's fields.
   * @return this assertion object.
   * @throws AssertionError if the actual ItemsItem's fields does not contain all given FieldsItem elements.
   */
  public S hasOnlyFields(java.util.Collection<? extends FieldsItem> fields) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // check that given FieldsItem collection is not null.
    if (fields == null) {
      failWithMessage("Expecting fields parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFields(), fields.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem's fields does not contain the given FieldsItem elements.
   *
   * @param fields the given elements that should not be in actual ItemsItem's fields.
   * @return this assertion object.
   * @throws AssertionError if the actual ItemsItem's fields contains any given FieldsItem elements.
   */
  public S doesNotHaveFields(FieldsItem... fields) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // check that given FieldsItem varargs is not null.
    if (fields == null) failWithMessage("Expecting fields parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFields(), fields);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem's fields does not contain the given FieldsItem elements in Collection.
   *
   * @param fields the given elements that should not be in actual ItemsItem's fields.
   * @return this assertion object.
   * @throws AssertionError if the actual ItemsItem's fields contains any given FieldsItem elements.
   */
  public S doesNotHaveFields(java.util.Collection<? extends FieldsItem> fields) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // check that given FieldsItem collection is not null.
    if (fields == null) {
      failWithMessage("Expecting fields parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFields(), fields.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem has no fields.
   * @return this assertion object.
   * @throws AssertionError if the actual ItemsItem's fields is not empty.
   */
  public S hasNoFields() {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have fields but had :\n  <%s>";

    // check
    if (actual.getFields().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getFields());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ItemsItem's recordId is equal to the given one.
   * @param recordId the given recordId to compare the actual ItemsItem's recordId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemsItem's recordId is not equal to the given one.
   */
  public S hasRecordId(String recordId) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting recordId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRecordId = actual.getRecordId();
    if (!Objects.areEqual(actualRecordId, recordId)) {
      failWithMessage(assertjErrorMessage, actual, recordId, actualRecordId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemsItem's revision is equal to the given one.
   * @param revision the given revision to compare the actual ItemsItem's revision to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemsItem's revision is not equal to the given one.
   */
  public S hasRevision(int revision) {
    // check that actual ItemsItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting revision of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRevision = actual.getRevision();
    if (actualRevision != revision) {
      failWithMessage(assertjErrorMessage, actual, revision, actualRevision);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
