package assertions.search;

import models.Value;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Value} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractValueAssert<S extends AbstractValueAssert<S, A>, A extends Value> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractValueAssert}</code> to make assertions on actual Value.
   * @param actual the Value we want to make assertions on.
   */
  protected AbstractValueAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Value's integer is equal to the given one.
   * @param integer the given integer to compare the actual Value's integer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Value's integer is not equal to the given one.
   */
  public S hasInteger(int integer) {
    // check that actual Value we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting integer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualInteger = actual.getInteger();
    if (actualInteger != integer) {
      failWithMessage(assertjErrorMessage, actual, integer, actualInteger);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Value's type is equal to the given one.
   * @param type the given type to compare the actual Value's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Value's type is not equal to the given one.
   */
  public S hasType(String type) {
    // check that actual Value we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
