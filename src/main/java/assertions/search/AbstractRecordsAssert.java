package assertions.search;

import models.Records;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link Records} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRecordsAssert<S extends AbstractRecordsAssert<S, A>, A extends Records> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRecordsAssert}</code> to make assertions on actual Records.
   * @param actual the Records we want to make assertions on.
   */
  protected AbstractRecordsAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Records's items contains the given ItemsItem elements.
   * @param items the given elements that should be contained in actual Records's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Records's items does not contain all given ItemsItem elements.
   */
  public S hasItems(ItemsItem... items) {
    // check that actual Records we want to make assertions on is not null.
    isNotNull();

    // check that given ItemsItem varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Records's items contains the given ItemsItem elements in Collection.
   * @param items the given elements that should be contained in actual Records's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Records's items does not contain all given ItemsItem elements.
   */
  public S hasItems(java.util.Collection<? extends ItemsItem> items) {
    // check that actual Records we want to make assertions on is not null.
    isNotNull();

    // check that given ItemsItem collection is not null.
    if (items == null) {
      failWithMessage("Expecting items parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getItems(), items.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Records's items contains <b>only</b> the given ItemsItem elements and nothing else in whatever order.
   * @param items the given elements that should be contained in actual Records's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Records's items does not contain all given ItemsItem elements.
   */
  public S hasOnlyItems(ItemsItem... items) {
    // check that actual Records we want to make assertions on is not null.
    isNotNull();

    // check that given ItemsItem varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Records's items contains <b>only</b> the given ItemsItem elements in Collection and nothing else in whatever order.
   * @param items the given elements that should be contained in actual Records's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Records's items does not contain all given ItemsItem elements.
   */
  public S hasOnlyItems(java.util.Collection<? extends ItemsItem> items) {
    // check that actual Records we want to make assertions on is not null.
    isNotNull();

    // check that given ItemsItem collection is not null.
    if (items == null) {
      failWithMessage("Expecting items parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getItems(), items.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Records's items does not contain the given ItemsItem elements.
   *
   * @param items the given elements that should not be in actual Records's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Records's items contains any given ItemsItem elements.
   */
  public S doesNotHaveItems(ItemsItem... items) {
    // check that actual Records we want to make assertions on is not null.
    isNotNull();

    // check that given ItemsItem varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Records's items does not contain the given ItemsItem elements in Collection.
   *
   * @param items the given elements that should not be in actual Records's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Records's items contains any given ItemsItem elements.
   */
  public S doesNotHaveItems(java.util.Collection<? extends ItemsItem> items) {
    // check that actual Records we want to make assertions on is not null.
    isNotNull();

    // check that given ItemsItem collection is not null.
    if (items == null) {
      failWithMessage("Expecting items parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getItems(), items.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Records has no items.
   * @return this assertion object.
   * @throws AssertionError if the actual Records's items is not empty.
   */
  public S hasNoItems() {
    // check that actual Records we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have items but had :\n  <%s>";

    // check
    if (actual.getItems().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getItems());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
