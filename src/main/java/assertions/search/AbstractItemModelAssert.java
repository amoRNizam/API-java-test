package assertions.search;

import models.ItemModel;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ItemModel} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractItemModelAssert<S extends AbstractItemModelAssert<S, A>, A extends ItemModel> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractItemModelAssert}</code> to make assertions on actual ItemModel.
   * @param actual the ItemModel we want to make assertions on.
   */
  protected AbstractItemModelAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ItemModel's created is equal to the given one.
   * @param created the given created to compare the actual ItemModel's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's created is not equal to the given one.
   */
  public S hasCreated(String created) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemModel's databaseId is equal to the given one.
   * @param databaseId the given databaseId to compare the actual ItemModel's databaseId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's databaseId is not equal to the given one.
   */
  public S hasDatabaseId(String databaseId) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting databaseId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDatabaseId = actual.getDatabaseId();
    if (!Objects.areEqual(actualDatabaseId, databaseId)) {
      failWithMessage(assertjErrorMessage, actual, databaseId, actualDatabaseId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemModel's handle is equal to the given one.
   * @param handle the given handle to compare the actual ItemModel's handle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's handle is not equal to the given one.
   */
  public S hasHandle(String handle) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting handle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualHandle = actual.getHandle();
    if (!Objects.areEqual(actualHandle, handle)) {
      failWithMessage(assertjErrorMessage, actual, handle, actualHandle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemModel's modified is equal to the given one.
   * @param modified the given modified to compare the actual ItemModel's modified to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's modified is not equal to the given one.
   */
  public S hasModified(String modified) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting modified of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualModified = actual.getModified();
    if (!Objects.areEqual(actualModified, modified)) {
      failWithMessage(assertjErrorMessage, actual, modified, actualModified);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemModel's records is equal to the given one.
   * @param records the given records to compare the actual ItemModel's records to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's records is not equal to the given one.
   */
  public S hasRecords(models.Records records) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting records of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    models.Records actualRecords = actual.getRecords();
    if (!Objects.areEqual(actualRecords, records)) {
      failWithMessage(assertjErrorMessage, actual, records, actualRecords);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemModel's recordsCount is equal to the given one.
   * @param recordsCount the given recordsCount to compare the actual ItemModel's recordsCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's recordsCount is not equal to the given one.
   */
  public S hasRecordsCount(int recordsCount) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting recordsCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRecordsCount = actual.getRecordsCount();
    if (actualRecordsCount != recordsCount) {
      failWithMessage(assertjErrorMessage, actual, recordsCount, actualRecordsCount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemModel's revision is equal to the given one.
   * @param revision the given revision to compare the actual ItemModel's revision to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's revision is not equal to the given one.
   */
  public S hasRevision(int revision) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting revision of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualRevision = actual.getRevision();
    if (actualRevision != revision) {
      failWithMessage(assertjErrorMessage, actual, revision, actualRevision);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ItemModel's size is equal to the given one.
   * @param size the given size to compare the actual ItemModel's size to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ItemModel's size is not equal to the given one.
   */
  public S hasSize(int size) {
    // check that actual ItemModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualSize = actual.getSize();
    if (actualSize != size) {
      failWithMessage(assertjErrorMessage, actual, size, actualSize);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
