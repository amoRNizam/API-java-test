package assertions.search;

import models.FieldsItem;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link FieldsItem} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractFieldsItemAssert<S extends AbstractFieldsItemAssert<S, A>, A extends FieldsItem> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFieldsItemAssert}</code> to make assertions on actual FieldsItem.
   * @param actual the FieldsItem we want to make assertions on.
   */
  protected AbstractFieldsItemAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual FieldsItem's fieldId is equal to the given one.
   * @param fieldId the given fieldId to compare the actual FieldsItem's fieldId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldsItem's fieldId is not equal to the given one.
   */
  public S hasFieldId(String fieldId) {
    // check that actual FieldsItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fieldId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFieldId = actual.getFieldId();
    if (!Objects.areEqual(actualFieldId, fieldId)) {
      failWithMessage(assertjErrorMessage, actual, fieldId, actualFieldId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldsItem's value is equal to the given one.
   * @param value the given value to compare the actual FieldsItem's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldsItem's value is not equal to the given one.
   */
  public S hasValue(models.Value value) {
    // check that actual FieldsItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    models.Value actualValue = actual.getValue();
    if (!Objects.areEqual(actualValue, value)) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
